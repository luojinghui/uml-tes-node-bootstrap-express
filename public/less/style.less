@import './style2.less';
* {margin: 0px; padding: 0px;}

.red(@color,@width,@height) {
  background: @color;
}

.box-shadow(@color:1px 1px 8px 0px, @c:blue) {
  -webkit-box-shadow: @color @c;
  -moz-box-shadow: @color @c;
  -o-box-shadow: @color @c;
  -ms-box-shadow: @color @c;
  box-shadow: @color @c;
}

.inline-block() {
  display: inline-block;
  zoom: 1;
  *display: inline;
}

.border(@length, @shape, @color) {
  border: @arguments;
}

.ba(@origin:top, @color-one:#2090FF, @color-two:#FF8D8D, @color-three:#fff) {
  background-color: @color-one;
  background-image: -webkit-linear-gradient(@origin, @color-one, @color-two, @color-three);
  background-image: -moz-linear-gradient(@origin, @color-one, @color-two, @color-three);
  background-image: -o-linear-gradient(@origin, @color-one, @color-two, @color-three);
  background-image: -ms-linear-gradient(@origin, @color-one, @color-two, @color-three);
  background-image: linear-gradient(@origin, @color-one, @color-two, @color-three);
}

.reflect (@length: 50%, @opacity: 0.2){
  -webkit-box-reflect: below 0px -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(@length, transparent), to(rgba(255, 255, 255, @opacity)));
}

.one {  color: @base; .inline-block(); }
.two {  color: @base2;  .inline-block();  }
.three {  color: @base6; .inline-block();  }
.four {  color: @base7; .inline-block();  }
.five {  color: @base; .inline-block(); }


@base: #3bafdA;
@base2: spin(@base, 180);
@base3: darken(spin(@base, 180), 5%);
@base4: lighten(@base, 15%);
@base5: fade(@base, 30%);

@base6: spin(@base, -(360 / 3));
@base7: spin(@base, (360 / 3));


@the-border: 1px;
@base-color: #111;
@red: #842210;

.button (@color: gray, @color2: white) {
  display: block;
  width: 100px;
  height: 28px;
  border: 1px solid black;
  background-color: @color;
  &:hover { background-color: @color2}
}

@red2: rgba(123,123,123,0.7);
@red3: #ddd;

.box {
  background: fade(@red2, 80%);
}
.border(@a) when (@a < 3) , (@a > 6) {
  border: unit(@a, px) solid black;
  height: 30px;
  width: 300px;
}

.set_c_b(@c_s, @width, @height) {
  //background: @c_s;
  width: unit(@width, px);
  height: unit(@height, px);
}


@cb: #ddd, #fff, #123123, #234234;
.c-b {
  background: extract(@cb, 1);
  //.set_c_b(#2a3a3a, 200, 200);
  height: 10px * length(@cb);
}


/*
 * 采用&引用完整的父选择器
 * 可通过追加和预追加的方式加工&，从而生成新的选择器
 * 通过&::after等方式添加伪元素样式规则集合
 * 同一个选择器可使用多个&
 * 通过在选择器后添加 "空格&"的方式，可将当前选择器排列到最前面
 */
@bg: #aaa;
#ps1 .btn{
  background-color: @bg;
  border-radius: 5px;
  &:hover{
    background-color: lighten(@bg, 30%);
    cursor: pointer;
  }
  &-msg, &-eof{
    color: blue;
  }
  .no-borderradius &{
    background-image: url('img/btn-bg.png');
  }
}
/*
 * &指向组选择器时，会生成新的组选择器
 */
#dummy1, .dummy1{
  　　&:hover{
    color: red;
  }
  & + &{
    font-size: 12px;
  }
}

//继承
.animal{
  color: #123;
}
.bg {
  background: #ccc;
}
/* 语法1：<selector>:extend(<parentSelector>){} */
.bear:extend(.animal):extend(.bg){
  width: 100px;
  height: 30px;
}
.deer {
  &:extend(.animal);
  &:extend(.bg);
  width: 100px;
  height: 30px;
}


//mixin
.cal(@type: 20px; @num: 40px; @clo: #ccc) {
  width: unit(@type, px) + unit(@num, px);
  height: unit(@num, px) - unit(@type, px);
  background-color: @clo;
  color: #ccc;
}

.cal {
  .cal(100; 200; #ccc);
}

.mixin (dark, @color) {
  color: darken(@color, 10%);
  background-color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
  background-color: lighten(@color, 10%);
}
.mixin {
  .mixin(light; #234);
  height: 30px;
  width: 200px;
}

.mi(@a, @color, @h) when (@a > 300px) {
  width: 400px;
  height: unit(@h, px);
  background-color: @color;
}
.mi(@a, @color, @h) when (@a < 300) {
  width: 200px;
  height: unit(@h, px);
  background-color: @color;
}
@www: 800;
.mi {
  .mi(@www, #ccc, 30);
}

#bundle {
  .button (@width: 100px) {
    display: block;
    height: 30px;
    width: unit(@width, px);
    border: 1px solid black;
    background-color: grey;
    &:hover { background-color: #ccc }
  }
}
#bundle > .button {
  #bundle>.button;
}
#header a {
  #bundle>.button(200);
}

@base-url: "../img/demo/";
.img {
  background: url("@{base-url}sea.jpg");
  height: 40px;
  width: 400px;
}

// @height: `$('.img').height()`;
@height: 20px;



.s-h {
  height: unit(@height, px);
  width: 400px;
  background-image: linear-gradient(92deg, black, white);
}

.content {
  .box-shadow(0px 0px 10px 0px, red);
  .border(1px, solid, gray);
  margin-top: 20px;
  text-align: center;
  .inline-block();
  width: 900px;
}

.ba {
  .ba(92deg, #fff, #FF8D8D, #2090FF);
  margin-top: 20px;
  height: 50px;
  width: 100%;
  .reflect();
}

.filter {
  width: 200px;
  height: 50px;
  background: #FF9090;
  .reflect(70%, 0.1);
}

.button {
  .button(#f65131, #ccc);
}
a.button {
  .button(orange);
}
.border {
  .border(2);
}

.good {
    .good(200, 30);
}
